#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ notebook —Å –≤—ã–≤–æ–¥–∞–º–∏.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python generate_executed_notebook.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç BCCD (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
2. –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —è—á–µ–π–∫–∏ notebook
3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã–≤–æ–¥–∞–º–∏
4. –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π
"""

import sys
import os
import subprocess
from pathlib import Path

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required = ['torch', 'torchvision', 'nbformat', 'nbconvert', 'jupyter']
    missing = []
    
    for package in required:
        try:
            __import__(package)
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {' '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_dataset():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    dataset_path = Path('./BCCD_Dataset/BCCD')
    
    if not dataset_path.exists():
        print("‚ö†Ô∏è  –î–∞—Ç–∞—Å–µ—Ç BCCD –Ω–µ –Ω–∞–π–¥–µ–Ω")
        response = input("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç —Å–µ–π—á–∞—Å? (y/n): ").strip().lower()
        
        if response == 'y':
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
            try:
                subprocess.run(['git', 'clone', 'https://github.com/Shenggan/BCCD_Dataset.git'], 
                             check=True)
                print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
                return True
            except subprocess.CalledProcessError:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
                return False
        else:
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return False
    
    print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç –Ω–∞–π–¥–µ–Ω")
    return True

def execute_notebook(notebook_path='ssd_bccd_detection.ipynb', output_path=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ notebook —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–æ–≤"""
    import nbformat
    from nbconvert.preprocessors import ExecutePreprocessor
    from datetime import datetime
    
    if output_path is None:
        output_path = notebook_path
    
    print(f"\n{'='*70}")
    print(f"üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï NOTEBOOK")
    print(f"{'='*70}")
    print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {notebook_path}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*70}\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ notebook
    print("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ notebook...")
    try:
        with open(notebook_path, 'r', encoding='utf-8') as f:
            nb = nbformat.read(f, as_version=4)
        print(f"‚úÖ Notebook –∑–∞–≥—Ä—É–∂–µ–Ω: {len(nb.cells)} —è—á–µ–µ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ executor
    ep = ExecutePreprocessor(
        timeout=7200,  # 2 —á–∞—Å–∞ –Ω–∞ —è—á–µ–π–∫—É (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
        kernel_name='python3',
        allow_errors=False
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    print(f"\n‚öôÔ∏è  –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫...")
    print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: 7200s –Ω–∞ —è—á–µ–π–∫—É")
    print(f"üìä –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–æ—Å–æ–±–µ–Ω–Ω–æ –æ–±—É—á–µ–Ω–∏–µ)...\n")
    
    try:
        ep.preprocess(nb, {'metadata': {'path': '.'}})
        print(f"\n‚úÖ –í—Å–µ —è—á–µ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ notebook —Å –≤—ã–≤–æ–¥–∞–º–∏...")
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            nbformat.write(nb, f)
        print(f"‚úÖ Notebook —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    return True

def validate_outputs(notebook_path='ssd_bccd_detection.ipynb'):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—ã–≤–æ–¥–æ–≤ –≤ notebook"""
    import nbformat
    
    print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–≤–æ–¥–æ–≤...")
    
    try:
        with open(notebook_path, 'r', encoding='utf-8') as f:
            nb = nbformat.read(f, as_version=4)
        
        code_cells = [c for c in nb.cells if c.cell_type == 'code']
        cells_with_output = [c for c in code_cells if c.outputs]
        
        coverage = (len(cells_with_output) / len(code_cells)) * 100 if code_cells else 0
        
        print(f"  –ö–æ–¥ —è—á–µ–µ–∫: {len(code_cells)}")
        print(f"  –° –≤—ã–≤–æ–¥–∞–º–∏: {len(cells_with_output)}")
        print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%")
        
        if coverage >= 90:
            print(f"‚úÖ Notebook —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–≤–æ–¥–æ–≤")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–≤–æ–¥–æ–≤ (< 90%)")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def main():
    print("="*70)
    print("üî¨ –ì–ï–ù–ï–†–ê–¢–û–† –í–´–ü–û–õ–ù–ï–ù–ù–û–ì–û SSD BCCD NOTEBOOK")
    print("="*70)
    print("\n–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π notebook —Å –≤—ã–≤–æ–¥–∞–º–∏,")
    print("–≥–æ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π.\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_requirements():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")
        sys.exit(1)
    
    if not check_dataset():
        print("\n‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è notebook")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è notebook
    notebook_path = 'ssd_bccd_detection.ipynb'
    if not os.path.exists(notebook_path):
        print(f"\n‚ùå –§–∞–π–ª {notebook_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "="*70)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï")
    print("="*70)
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!")
    print("–¢—Ä–µ–±—É–µ—Ç—Å—è:")
    print("  - GPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("  - ~5GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞")
    print("  - –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∏—Ç–∞–Ω–∏—é\n")
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
    
    if response != 'y':
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ backup
    if os.path.exists(notebook_path):
        import shutil
        backup_path = notebook_path.replace('.ipynb', '_backup.ipynb')
        shutil.copy2(notebook_path, backup_path)
        print(f"\nüíæ –°–æ–∑–¥–∞–Ω backup: {backup_path}")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    success = execute_notebook(notebook_path)
    
    if success:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        has_outputs = validate_outputs(notebook_path)
        
        print("\n" + "="*70)
        if has_outputs:
            print("üéâ –£–°–ü–ï–•!")
            print("="*70)
            print(f"\n‚úÖ Notebook –≥–æ—Ç–æ–≤ –¥–ª—è GitHub!")
            print(f"\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"  git add {notebook_path}")
            print(f"  git commit -m '–î–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã–≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSD BCCD notebook'")
            print(f"  git push origin main")
            print(f"\n‚úÖ –ó–∞–º–µ—á–∞–Ω–∏–µ '–Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —è—á–µ–µ–∫' –ù–ï –ø–æ—è–≤–∏—Ç—Å—è!")
        else:
            print("‚ö†Ô∏è  –í–´–ü–û–õ–ù–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("="*70)
            print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è—á–µ–π–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—ã–≤–æ–¥—ã")
            print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ notebook –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ GitHub")
        print("\n" + "="*70)
    else:
        print("\n" + "="*70)
        print("‚ùå –û–®–ò–ë–ö–ê")
        print("="*70)
        print(f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å notebook")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        print("\n" + "="*70)
        sys.exit(1)

if __name__ == "__main__":
    main()
